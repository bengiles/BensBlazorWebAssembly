@page "/videogames";
@using BensBlazorWebAssembly.Client.Services;
@using BensBlazorWebAssembly.Common.Entities;
@using BensBlazorWebAssembly.Common.Enums;
@rendermode InteractiveWebAssembly


<h3>Video Games</h3>

@if (games == null)
{
    <em>loading...</em>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Genre</th>
                <th>Platform</th>
                <th>Age Restriction</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr @onclick="()=>OpenGamePage(game.Id)">
                    <td>@game.Title</td>
                    <td>@game.Genre</td>
                    <td>@game.Platform</td>
                    <td>@game.AgeRestriction</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>OpenGamePage(game.Id)">Edit</button>
                        <a class="btn btn-danger" @onclick="()=>DeleteVideoGameAsync(game.Id)">Delete</a>
                    </td>
                </tr>
            }
            @* add a row where the user can add a new entry *@
            <tr>
                <td><input type="text" class="form-control" @bind="newItem.Title" placeholder="Title" /></td>
                <td><input type="text" class="form-control" @bind="newItem.Genre" placeholder="Genre" /></td>
                <td>
                    <div class="form-group">

                        <InputSelect id="platform" @bind-Value="newItem.Platform">
                            @foreach (var platform in Enum.GetValues(typeof(Platform)))
                            {
                                <option value="@platform">@platform</option>
                            }
                        </InputSelect>
                    </div>
                </td>
                <td>
                    <div class="form-group">

                        <InputSelect id="ageRestriction" @bind-Value="newItem.AgeRestriction">
                            @foreach (var ageRestriction in Enum.GetValues(typeof(AgeRestriction)))
                            {
                                <option value="@ageRestriction">@ageRestriction</option>
                            }
                        </InputSelect>
                    </div>
                </td>

                <td><button class="btn btn-success" @onclick="async () => {await AddVideoGameAsync();}">Add</button></td>
            </tr>
        </tbody>
    </table>

}

@code {
   
    [Inject]
    private IVideoGameService? _videoGameService { get; set; }

    private IEnumerable<VideoGame>? games;
    private VideoGame newItem = new VideoGame();

    protected override async Task OnInitializedAsync()
    {
        games = await _videoGameService.GetVideoGamesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _videoGameService.GetVideoGamesAsync();
            StateHasChanged();
        }
    }

    public async Task AddVideoGameAsync()
    {
        await _videoGameService.AddVideoGameAsync(newItem);
        // reset the newItem
        newItem = new VideoGame();
        // refresh the list of video games
        games = await _videoGameService.GetVideoGamesAsync();
        StateHasChanged();
    }

    public async Task DeleteVideoGameAsync(int id)
    {
        var success = await _videoGameService.DeleteVideoGameAsync(id);
        if (success)
        {
          //  _toastService.ShowSuccess("Video game deleted successfully");
            games = await _videoGameService.GetVideoGamesAsync();
            StateHasChanged();
        }
        else
        {
           // _toastService.ShowError("Failed to delete video game");
        }

    }

    public async Task EditVideoGameAsync(int id)
    {
        // open a modal dialog to edit the video game
    }

    public void OpenGamePage(int Id)
    {
        var x = Id;
    }
}
